BEFORE CODE
public Card disproveSuggestion(String room, String weapon, String person,
			ArrayList<Player> test) {
		ArrayList<Card> choices = new ArrayList<Card>();
		for (int i = 0; i < test.size(); i++) {
			for (int j = 0; j < test.get(i).getCards().size(); j++) {
				if (this.getTurn() != test.get(i)) {
					if (test.get(i).getCards().get(j).getName().equals(room))
						choices.add(test.get(i).getCards().get(j));
					else if (test.get(i).getCards().get(j).getName()
							.equals(weapon))
						choices.add(test.get(i).getCards().get(j));
					if (test.get(i).getCards().get(j).getName().equals(person))
						choices.add(test.get(i).getCards().get(j));
				}
			}
			if (choices.size() == 1) {
				return choices.get(0);
			} else if (choices.size() > 1) {
				Random r = new Random();
				int index = r.nextInt(choices.size());
				return choices.get(index);
			}
		}
		return cannotDisprove;
	}
disproveSuggestion method is contained in the ClueGame class.

AFTER:

	public Card disproveSuggestion(String person, String weapon, String room) {
		ArrayList<Card> choices = new ArrayList<Card>();
		for (int j = 0; j < this.cards.size(); j++) {
			if (this.getCards().get(j).getName().equals(room))
				choices.add(this.cards.get(j));
			else if (this.cards.get(j).getName().equals(weapon))
				choices.add(this.cards.get(j));
			else if (this.cards.get(j).getName().equals(person))
				choices.add(this.cards.get(j));
		}
		if (choices.size() == 0) 
			return null;
		Random r = new Random();
		int test = r.nextInt(choices.size());
		return choices.get(test);
	}





BEFORE:

	
	@Test
	public void testComputerSuggestion() {
		int Ecount = 0;
		int Scount = 0;
		int randCount = 0;
		ComputerPlayer cp = new ComputerPlayer("computer");
		Suggestion one = new Suggestion("Emily", "Rope", "Ballroom");
		for (int i = 0; i < game.getPlayers().size(); i++) {
			for (int j = 0; j < game.getPlayers().get(i).getCards().size(); j++) {				
				if (game.getPlayers().get(i).getCards().get(j).getName().equals("Emily") ||
						game.getPlayers().get(i).getCards().get(j).getName().equals("Rope") ||
						game.getPlayers().get(i).getCards().get(j).getName().equals("Ballroom")) {
					continue;
				}
				
				cp.updateSeen(game.getPlayers().get(i).getCards().get(j));
			}
		}
		//Test suggestions aren't found in the seen card list
		Suggestion s1 = cp.createSuggestion("Ballroom", game.getCards());
		Assert.assertFalse(cp.getSeen().contains(s1.getPerson()));
		Assert.assertFalse(cp.getSeen().contains(s1.getWeapon()));
		Assert.assertFalse(cp.getSeen().contains(s1.getRoom()));
		
		
		ComputerPlayer cp2 = new ComputerPlayer("computer2");
		Suggestion two = new Suggestion("Susan", "Rope", "Ballroom");
		for (int x = 0; x < game.getPlayers().size(); x++) {
			for (int y = 0; y < game.getPlayers().get(x).getCards().size(); y++) {				
				if (game.getPlayers().get(x).getCards().get(y).getName().equals("Emily") ||
						game.getPlayers().get(x).getCards().get(y).getName().equals("Rope") ||
						game.getPlayers().get(x).getCards().get(y).getName().equals("Ballroom") ||
						game.getPlayers().get(x).getCards().get(y).getName().equals("Susan")) {
					continue;
				}
				
				cp.updateSeen(game.getPlayers().get(x).getCards().get(y));
			}
		}
		
		// Loop to get suggestions, count each suggestion returned
		for (int i = 0; i < 100; i++) {
			Suggestion s = cp2.createSuggestion("Ballroom", game.getCards());
			if (s.equals(one)) {
				Ecount++;
			} else if (s.equals(two)) {
				Scount++;
			} else {
				randCount++;
			}
		}
		
		//Test for 2 possible suggestions
		Assert.assertEquals(100, Ecount + Scount + randCount);
		Assert.assertTrue(Ecount > 0);
		Assert.assertTrue(Scount > 0);
		Assert.assertTrue(randCount > 0);
	}

AFTER:

	@Test
	public void testCheckingAComputerSuggestion() {
		ComputerPlayer cp = new ComputerPlayer("John Blue");
		cp.getDeck(game.getCards());
		//adds all the people except Dave and Emily
		cp.updateSeen(new Card("John", CardType.PERSON));
		cp.updateSeen(new Card("Susan", CardType.PERSON));
		cp.updateSeen(new Card("Tom", CardType.PERSON));
		cp.updateSeen(new Card("Linda", CardType.PERSON));
		//adds all the weapons except Candlestick and Wrench
		cp.updateSeen(new Card("Knife", CardType.WEAPON));
		cp.updateSeen(new Card("Study", CardType.ROOM));
		cp.updateSeen(new Card("Revolver", CardType.WEAPON));
		cp.updateSeen(new Card("Rope", CardType.WEAPON));
		cp.updateSeen(new Card("Lead pipe", CardType.WEAPON));

		Suggestion s = cp.createSuggestion("Billiard Room");
		assertEquals(s.getRoom().getName(), "Billiard Room");

		int plum = 0;
		int green = 0;
		int wrench = 0;
		int candlestick = 0;
		// Run the test 100 times
		Suggestion s2 = new Suggestion("hello", "h", "j");
		for (int i=0; i<100; i++) {
			s2 = cp.createSuggestion("Billiard Room");
			//System.out.println(s2.getPerson() + " " + s2.getWeapon());
			//System.out.println("hello");
			if (s2.getPerson().getName().equals("Dave"))
				plum++;
			else if (s2.getPerson().getName().equals("Emily"))
				green++;
			else
				fail("Invalid person selected");
			if (s2.getWeapon().getName().equals("Candlestick"))
				candlestick++;
			else if (s2.getWeapon().getName().equals("Wrench"))
				wrench++;
			else
				fail("Invalid weapon selected");
		}
		// Ensure we have 100 total selections (fail should also ensure)
		assertEquals(100, plum + green);
		assertEquals(100, wrench + candlestick);
		// Ensure each target was selected more than once
		assertTrue(plum > 10);
		assertTrue(green > 10);
		assertTrue(wrench > 10);	
		assertTrue(candlestick > 10);	
		assertTrue(!cp.getCardsSeen().contains(new Card(s2.getPerson().getName(), CardType.PERSON)));
		assertTrue(!cp.getCardsSeen().contains(new Card(s2.getPerson().getName(), CardType.WEAPON)));

		//tests to see that there is only one possible suggestion and it picks it
		cp.updateSeen(new Card("Candlestick", CardType.WEAPON));
		cp.updateSeen(new Card("Emily", CardType.PERSON));

		s = cp.createSuggestion("Billiard Room");
		assertEquals(s.getRoom().getName(), "Billiard Room");
		assertEquals(s.getPerson().getName(), "Dave");
		assertEquals(s.getWeapon().getName(), "Wrench");
	}	 
}


BEFORE:

	public void updateSeen(Card shown) {
		seen.add(shown);
	}


AFTER:
	public void updateSeen(Card shown) {
		//this updates the cards seen and also removes cards
		// from the options lists
		seen.add(shown);
		switch(shown.getType()){
		case PERSON:
			personOptions.remove(shown.getName());
			break;
		case ROOM:
			roomOptions.remove(shown.getName());
			break;
		case WEAPON:
			weaponOptions.remove(shown.getName());
			break;
		}
	}


BEFORE:
there was no createAccusation method

AFTER:
	public Solution createAccusation() {
		//weapons and players only contain unseen cards, randomly choose a card from each to be part of your suggestion
		Random rand = new Random();
		int r1 = rand.nextInt(personOptions.size());
		int r2 = rand.nextInt(weaponOptions.size());
		int r3 = rand.nextInt(roomOptions.size());

		person = personOptions.get(r1);
		weapon = weaponOptions.get(r2);
		room = roomOptions.get(r3);

		return new Solution(person, weapon, room);
	}



BEFORE:

	public Suggestion createSuggestion(String currentRoom, ArrayList<Card> cards) {
		ArrayList<String> personOptions = new ArrayList<String>();
		ArrayList<String> weaponOptions = new ArrayList<String>();
		
		for (int i = 0; i < cards.size(); i++) {
			if (!seen.contains(cards.get(i))) {
				if (cards.get(i).getType() == Card.CardType.PERSON) {
						personOptions.add(cards.get(i).getName());
				}
				else if (cards.get(i).getType() == Card.CardType.WEAPON) {
						weaponOptions.add(cards.get(i).getName());
				}
			}
		}
		
		// Pick suggestion from lists
		Random rand = new Random();
		if (personOptions.size() > 1) {
			person = personOptions.get(rand.nextInt(personOptions.size()));
		} else {
			person = personOptions.get(0);
		}
		
		if (weaponOptions.size() > 1) {
			weapon = weaponOptions.get(rand.nextInt(weaponOptions.size()));
		} else {
			weapon = weaponOptions.get(0);
		}
		
		return new Suggestion(person, weapon, currentRoom);
	}

AFTER:
	public Suggestion createSuggestion(String currentRoom) {
		

		//weapons and players only contain unseen cards, randomly choose a card from each to be part of your suggestion
		Random rand = new Random();
		int r1 = rand.nextInt(personOptions.size());
		int r2 = rand.nextInt(weaponOptions.size());

		person = personOptions.get(r1);
		weapon = weaponOptions.get(r2);

		return new Suggestion(person, weapon, currentRoom);
	}

BEFORE:
there was no getDeck method, needed it for new style of creating playerOption and weaponOption lists

AFTER:

	public void getDeck(ArrayList<Card> deck){
		for(Card c: deck){
			switch(c.getType()){
			case PERSON:
				personOptions.add(c.getName());
				break;
			case ROOM:
				roomOptions.add(c.getName());
				break;
			case WEAPON:
				weaponOptions.add(c.getName());
				break;
			}
		}
	}


BEFORE:

public void loadConfigFiles() {
		try {
			this.loadRoomConfig();
			this.loadBoardConfig();
			this.loadPlayerConfig();
			this.loadCardConfig("CardConfig.csv");
			this.dealCards();
			
			clueBoard.setPlayers(players);
			this.setUpGui();
		} catch (FileNotFoundException | BadConfigFormatException e) {
			System.out.println(e.getMessage());
		}
		clueBoard.calcAdjacencies();
	}

AFTER:
public void loadConfigFiles() {
		try {
			this.loadRoomConfig();
			this.loadBoardConfig();
			this.loadPlayerConfig();
			this.loadCardConfig("CardConfig.csv");
			for(Player p: players){
				if(p instanceof ComputerPlayer){
					((ComputerPlayer)p).getDeck(cards);
				}
			}
			this.dealCards();
			
			clueBoard.setPlayers(players);
			this.setUpGui();
		} catch (FileNotFoundException | BadConfigFormatException e) {
			System.out.println(e.getMessage());
		}
		clueBoard.calcAdjacencies();
	}


BEFORE:
no handlesuggestion method in ClueGame, was disproveSuggestion

public Card disproveSuggestion(String room, String weapon, String person,
			ArrayList<Player> test) {
		ArrayList<Card> choices = new ArrayList<Card>();
		for (int i = 0; i < test.size(); i++) {
			for (int j = 0; j < test.get(i).getCards().size(); j++) {
				if (this.getTurn() != test.get(i)) {
					if (test.get(i).getCards().get(j).getName().equals(room))
						choices.add(test.get(i).getCards().get(j));
					else if (test.get(i).getCards().get(j).getName()
							.equals(weapon))
						choices.add(test.get(i).getCards().get(j));
					if (test.get(i).getCards().get(j).getName().equals(person))
						choices.add(test.get(i).getCards().get(j));
				}
			}
			if (choices.size() == 1) {
				return choices.get(0);
			} else if (choices.size() > 1) {
				Random r = new Random();
				int index = r.nextInt(choices.size());
				return choices.get(index);
			}
		}
		return cannotDisprove;
	}



AFTER:
public void handleSuggestion(String person, String room, String weapon, Player accuser, ArrayList<Player> group) {
			ArrayList<Card> choices = new ArrayList<Card>();
			for (int i = 0; i < group.size(); i++) {
				if (!group.get(i).equals(accuser)) {
					disproveCard = group.get(i).disproveSuggestion(person, room, weapon);
				if (disproveCard != null)
					break;
				}
			}
			
			//accusingPerson is the person making the suggestion
			int playerPosition = 0;
			int initialPosition = 0;

			//find accusingPerson in arrayList of players, 
			for(int i = 0; i < group.size(); i++) {
				if(group.get(i).equals(accuser)) {

					playerPosition = i;
					initialPosition = i;
				}
			}

			if(playerPosition == group.size()-1) {
				playerPosition = 0;
			}
			else playerPosition++;


			//loop through and ask each player to disprove suggestion

			//for person at that location, call disprove suggestion
			disproveCard = group.get(playerPosition).disproveSuggestion(person, weapon, room);
			while(disproveCard == null && (playerPosition != initialPosition)) {

				if(playerPosition == group.size()-1) {
					playerPosition = 0;
				}
				else playerPosition++;
				if(playerPosition != initialPosition) {
					disproveCard = group.get(playerPosition).disproveSuggestion(person, weapon, room);
				}
			}
			if(disproveCard != null) {
				//update seenCards
				for(Player p: group) {
					if(p instanceof ComputerPlayer){
						p = (ComputerPlayer)p;
						if(((ComputerPlayer)p).getSeen().contains(disproveCard));
						((ComputerPlayer)p).updateSeen(disproveCard);
					}
				}
			}
			//if someone can disprove the suggestion, then disproveSuggestion will return a card instead of null and stop
			
	}




BEFORE:
//Test that all players are queried
		computer1.addCard(TomCard);
		computer2.addCard(LindaCard);
		computer3.addCard(RopeCard);
		human.addCard(WrenchCard);
		human.addCard(KitchenCard);
		test3.add(computer1);
		test3.add(computer2);
		test3.add(computer3);
		test3.add(human);
		
		//Suggestion that no player could disprove
		Assert.assertEquals(game.getNullCard(), game.disproveSuggestion("wrong", "wrong", "wrong", test3));
		//Suggestion that only the human could disprove
		Assert.assertEquals(human.getCards().get(0), game.disproveSuggestion("wrong", "wrong", WrenchCard.getName(), test3));
		//Test if last person who can disprove suggestion can do so
		Assert.assertEquals(human.getCards().get(1), game.disproveSuggestion("wrong", "wrong", KitchenCard.getName(), test3));
		//Test if first person who can disprove suggestion can do so
		Assert.assertEquals(computer2.getCards().get(0), game.disproveSuggestion(LindaCard.getName(), "wrong", "wrong", test3));
		//Make sure if person who made suggestion was only one who could disprove it, null is returned
		game.setTurn(test3.get(0));
		Assert.assertEquals(null, game.disproveSuggestion(TomCard.getName(), "wrong", "wrong", test3));
		test3.add(test3.get(0));
		test3.remove(0);

this was inside of 

	public void testDisprovingSuggestion() {

but we created a new test for it

AFTER:
	@Test
	public void testAllPlayersQueried(){
		//create arrayList of players
		ArrayList<Player> players = new ArrayList<Player>();

		players.add(new HumanPlayer("Col. Mustard"));
		players.add(new ComputerPlayer("Ms. Scarlet"));
		players.add(new ComputerPlayer("Mrs. White"));
		players.add(new ComputerPlayer("Rev. Green"));
		players.add(new ComputerPlayer("Mrs. Peacock"));
		players.add(new ComputerPlayer("Prof. Plum")); //No purple????????

		//assign each player cards
		//HOW DO WE WANT TO ASSIGN CARDS? CAN WE JUST CALL DEAL OR DO WE NEED TO INDIVIDUALLY ASSIGN MULTIPLE CARDS?
		Player tempPlayer = players.get(0);
		tempPlayer.addCard(new Card("Mrs. White", CardType.PERSON));
		tempPlayer = players.get(1);
		tempPlayer.addCard(new Card("Ms. Scarlet", CardType.PERSON));
		tempPlayer = players.get(2);
		tempPlayer.addCard(new Card("Mrs. Peacock", CardType.PERSON));
		tempPlayer = players.get(3);
		tempPlayer.addCard(new Card("Knife", CardType.WEAPON));
		tempPlayer = players.get(4);
		tempPlayer.addCard(new Card("Rope", CardType.WEAPON));
		tempPlayer = players.get(5);
		tempPlayer.addCard(new Card("Axe", CardType.WEAPON));

		//test making a suggestion that no players can disprove
		game.handleSuggestion("Prof. Plum", "Study", "Wrench", players.get(3), players);
		//System.out.println(game.getDisproveCard().getName());

		assertTrue(game.getDisproveCard() == null);
		//function that returns player and card that disproved suggestion
		//make a suggestion that only one person can disprove
		game.handleSuggestion("Ms. Scarlet", "Study", "Wrench", players.get(4), players);
		//System.out.println(game.getDisproveCard().getName());
		assertTrue(game.getDisproveCard().equals(new Card("Ms. Scarlet", CardType.PERSON)));


		//ensure that if person who made the suggestion was the only one who could disprove it, then null was returned
		game.handleSuggestion("Mrs. Peacock", "Study", "Wrench", players.get(2), players);
		assertTrue(game.getDisproveCard() == null);


		//make sure that if 2 players can disprove something, the first player does the disproving
		game.handleSuggestion("Mrs. Peacock", "Study", "Knife", players.get(1), players);
		assertTrue(game.getDisproveCard().equals(new Card("Mrs. Peacock", CardType.PERSON)));

	}


BEFORE:
		
		// Go from 0 to size - 1 of the cards and apply modulus to get player #
		int totalCards = tempList.size();
		for (int i = 0; i < totalCards; i++) {
			int player; = i % 6;

AFTER:

		int player;
		// Go from 0 to size - 1 of the cards and apply modulus to get player #
		int totalCards = tempList.size();
		for (int i = 0; i < totalCards; i++) {
			player = i % 6;


BEFORE:

	public void drawName(Graphics g, Board b) {
		
	}

AFTER:
nothing, removed method




in boardcell
BEFORE:
public abstract void drawName(Graphics g, Board board);

AFTER:
nothing

BEFORE:
@Override
public void drawName(Graphics g, Board board) {
		g.setColor(Color.BLACK);
		g.setFont(new Font("SansSerif", Font.PLAIN, 12));
		if (board.getCenters().contains(this)) { //If this RoomCell is a center label			
			g.drawString(board.getRooms().get(roomInitial).toUpperCase(), getColumn() * CELL_SIZE, getRow() * CELL_SIZE);
		}
	}

AFTER:
public void drawName(Graphics g, Board board) {
		g.setColor(Color.BLACK);
		g.setFont(new Font("SansSerif", Font.PLAIN, 12));
		if (board.getCenters().contains(this)) { //If this RoomCell is a center label			
			g.drawString(board.getRooms().get(roomInitial).toUpperCase(), getColumn() * CELL_SIZE, getRow() * CELL_SIZE);
		}
	}

